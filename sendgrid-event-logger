#!/usr/bin/env node

/*
 * Copyright (C) 2016 TrustedCompany.com
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published bythe Free Software Foundation
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

var elastic = require('elasticsearch');
var express = require('express');
var basicauth = require('basicauth-middleware');
var server = require('./lib/server');
var error500 = require('./lib/error500');
var https = require('https');
var fs = require('fs');
var print = require('./lib/print');

var configParser = require('./lib/config');

function checkElasticConnection (es,callback) {
	indexer.indices.existsTemplate({
		name: 'sendgrid_template'
	},(err,exist)=>{
		if (err) {
			print(`
				ERROR: Cannot connect to elasticsearch
				
				Please check the settings in ${configParser.configPath}.
				Also, ensure that elasticsearch is running.
			`);
			process.exit();	
		}
		if (!exist) {
			print('Installing template..');
			var template = require('./lib/elasticsearch-template.json');
			indexer.indices.putTemplate({
				name: 'sendgrid_template',
				body: template
			},(err)=>{
				if (err) {
					print('ERROR:' + err);	
				}
				else {
					callback();
				}
			});
		}
		else {
			callback();
		}
	});
}

if (process.argv[2] == 'install') {
	configParser.init(fs);
}
var conf = configParser(fs);

var indexer = new elastic.Client({
	host: conf.elasticsearch_host,
	log: function(){
		this.error = ()=>{};
		this.warning = ()=>{};
		this.info = ()=>{};
		this.debug = ()=>{};
		this.trace = ()=>{};
		this.close = ()=>{};
	}
});

if (process.argv[2] == 'install') {
	checkElasticConnection(indexer,function(){
		process.exit();
	});
}
else {
	checkElasticConnection(indexer,()=>{
		var app = express();
		
		server.init(indexer);
		
		if (conf.use_basicauth) {
			app.use(basicauth(
				conf.basicauth.user,
				conf.basicauth.password
			));
		}
		
		app.post('/logger',
			function(req,res,next){
				if (!req.body) {
					req.body = '';
				}
				req.on('data',function(x){
					req.body += x.toString('utf8');
					if (req.body.length >= req.headers['content-length']) {
						req.body = JSON.parse(req.body);
						next();
					}
				});
			},
			server.logger
		);
		app.get('/status',
			server.status
		);
		app.get('/about',
			server.copyright
		);
		app.get('/copyright',
			server.copyright
		);
		
		// Handle 404
		app.use(function(req, res) {
			res.setHeader('Content-Type', 'application/json');
			
			res.status(400);
			res.end(JSON.stringify({
				status: "error",
				error: 404
			}));
		});
		
		
		app.use(function(error, req, res, next) {
			error500(res);
		});
		
		if (conf.use_https) {
			var credentials = {
				key: fs.readFileSync(conf.https.key_file, 'utf8'),
				cert: fs.readFileSync(conf.https.cert_file, 'utf8')
			};
			var httpsServer = https.createServer(credentials, app);
			httpsServer.listen(conf.port);
		}
		else {
			app.listen(conf.port);
		}
		console.log('Server started..');
	});
}